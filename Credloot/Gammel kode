--Liste over alle som har item på wishlist og hvilke prio
function ShowWL()


returnWishlistName(Wishlist2, WLitemId)
final_table = playersInRaidThatWantItem(raidNameCheck, wishlistNameCheck)

for k,v in pairs(returnWishlistName) do
    print(v)
end
end

function checkRaid()
    WlPrio = raidName()
    for k, v in pairs(WlPrio) do
    print(v)
end
end

function ShowWL2()
    for k, v in pairs(returnWishlistName(Wishlist2, WLitemId)) do
        print(v)
    end
end

--[[ FUNKSJON FOR Å PRINTE TABLES
function printtable(table)
    for k, v in pairs(table) do
        print(v)
    end
end]]

-- tinsert(CL.DB.ReceivedItems, {
--     character = "tjallefjompen",
--     ["item_id"] = 103289,
--     cost = 12389
--     looted_at = timestampNow()
--     checksum = generateChecksum() -- Important, needed to keep track of things
-- })
-- GI OPPDATERT STANDING (PR)
function ShowPR()
    -- Go over all received items
    for character, items in pairs(CL.DB.ReceivedItems) do   
        -- Since the character can receive more than 1 item, loop all the items for that character
        for k, item in pairs(items) do
            -- Ensure character exists in APGP table
            if (APGP[character]) then
                APGP[character]["sum_cost"] = sumItemCost(Reciveditem, character)
            end
        end
    end

    -- BEREGNE ENDELIG STANDING (PR)
    for character, data in pairs(CL.DB.ImportedAPGP) do
        denominator = APGP[character]["GP"] + (APGP[character]["sum_cost"] or 0)
        if denominator == 0 then
            APGP[character]["PR"] = 0
        else
            APGP[character]["PR"] = APGP[character]["AP"] / denominator
        end
        print(character, APGP[character]["PR"])
    end 
end


-- ALLE PLAYERS SOM HAR ITEM PÅ WISHLIST DELES I TO TABELLER BASERT PÅ PRIO = 1 OG PRIO = 2
--[[function createScoreListTest(table, itemId)
    for k,v in pairs(table) do
        if tonumber(k) == tonumber(itemId) then 
            prio1Table = {}
			prio2Table = {}
            for index, data in pairs(table) do
                if tonumber(index) == tonumber(itemId) then
					for key, value in pairs(data) do
						if value.prio == 1 then
							prio1Table[value.character] = value.prio
                        elseif value.prio == 2 then
							prio2Table[value.character] = value.prio
						end
					end
				end
			end
			for k, v in pairs(prio1Table) do -- printing out the tables to see values
				print(k,v)
			end
			for k, v in pairs(prio2Table) do 
				print(k,v) 
			end
		end
	end
end]]

--Liste med alle navn i Wishlist på en item
function returnWishlistName(table, itemId)
    for k,v in pairs(table) do
        if tonumber(k) == tonumber(itemId) then 
        	wishListName = {}
        	for index, data in pairs(table) do
        		if tonumber(index) == tonumber(itemId) then
        			for key, value in pairs(data) do
                        -- if value.prio == true then
                        if UnitInRaid(value.character) ~= nil then
                        -- if UnitInRaid(value.character) >= 1 then
                            tinsert(wishListName, value.character)
                        end
					end
				end
			end
		end
	end
    return wishListName
end

--[[Lager en tabell som inneholder alle spillere i raidet
function raidName()
	raidNameTable = {}
	local members = GetNumGroupMembers(); 
        for i=1, members, 1 do
			name = UnitName("raid"..i)
			tinsert(raidNameTable,name)
		end
		return raidNameTable
end
function classNameRaid()
	raidClassTable = {}
	local members = GetNumGroupMembers(); 
        for i=1, members, 1 do
            class = strlower(select(2, UnitClass("raid"..i)))
			tinsert(raidClassTable, class)
		end
		return raidClassTable
end]]

function playersInRaidThatWantItem(table1, table2)
	local compareMatch = {}
	-- check that both tables contains something
	--if table1 ~= nil and table2 ~= nil then
      --  print("tables not empty")
		for k, v in pairs(table1) do 
			for l, x in pairs(table2) do
				if v == x then
                    print("yes")
					tinsert(compareMatch, v)                                      
                else print("no")
                end
			end
		end
    
	if compareMatch ~= nil then
		return compareMatch
	else 
		print("no matches")
	end    
end
--[[local a = playersInRaidThatWantItem(wishListName, raidName)
	
for k, v in pairs(a) do
	print(v)
end]]   